import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:sgs_golf/core/nav                              Icon(
                                Icons.refresh,
                                color: const Color(0xFFE53935), // rojoAlerta
                              ),
                              const SizedBox(width: 8),
                              Text(
                                'Reintentar',
                                style: const TextStyle(
                                  color: Color(0xE5E53935), // rojoAlerta con opacidad
                                  fontWeight: FontWeight.w500,
                                ),_router.dart';
import 'package:sgs_golf/core/theme/app_theme.dart';
import 'package:sgs_golf/features/dashboard/providers/dashboard_provider.dart';
import 'package:sgs_golf/features/dashboard/session_list_widget.dart';
import 'package:sgs_golf/features/demo/routes.dart';
import 'package:sgs_golf/shared/utils/animation_utils.dart';

/// Pantalla principal que sirve como hub central de la aplicación
///
/// Esta pantalla muestra:
/// - Un resumen de estadísticas recientes
/// - Accesos rápidos a las funcionalidades principales
/// - Lista de sesiones de práctica recientes
class DashboardScreen extends StatefulWidget {
  const DashboardScreen({super.key});

  @override
  State<DashboardScreen> createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  @override
  void initState() {
    super.initState();
    // Cargar datos al inicializar la pantalla
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Provider.of<DashboardProvider>(context, listen: false).loadSessions();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('SGS Golf'),
        elevation: 0,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: () {
              Provider.of<DashboardProvider>(
                context,
                listen: false,
              ).refreshData();
            },
            tooltip: 'Actualizar',
          ),
          IconButton(
            icon: const Icon(Icons.settings),
            onPressed: () {
              // Navegación a configuración (futuro)
            },
            tooltip: 'Configuración',
          ),
        ],
      ),
      body: RefreshIndicator(
        onRefresh: () async {
          await Provider.of<DashboardProvider>(
            context,
            listen: false,
          ).refreshData();
        },
        child: Consumer<DashboardProvider>(
          builder: (context, dashboardProvider, child) {
            if (dashboardProvider.isLoading) {
              return Center(
                child: AnimationUtils.fadeInAnimation(
                  child: const CircularProgressIndicator(),
                ),
              );
            }

            if (dashboardProvider.error != null) {
              return Center(
                child: AnimationUtils.fadeSlideInAnimation(
                  duration: const Duration(milliseconds: 400),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        Icons.error_outline,
                        size: 48,                  color: AppColors.rojoAlerta.withValues(alpha: 204), // 0.8 * 255
                ),
                const SizedBox(height: 16),
                Text(
                  dashboardProvider.error!,
                  style: TextStyle(
                    color: AppColors.rojoAlerta.withValues(alpha: 230), // 0.9 * 255
                    fontSize: 16,
                  ),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 24),
                      AnimationUtils.scaleTapAnimation(
                        onTap: () => dashboardProvider.refreshData(),
                        child: Container(
                          padding: const EdgeInsets.symmetric(
                            horizontal: 24,
                            vertical: 12,
                          ),
                          decoration: BoxDecoration(
                            color: AppColors.rojoAlerta.withValues(alpha: 26), // 0.1 * 255
                            borderRadius: BorderRadius.circular(30),
                            border: Border.all(
                              color: AppColors.rojoAlerta.withValues(alpha: 77), // 0.3 * 255
                              width: 1,
                            ),
                          ),
                          child: const Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(
                                Icons.refresh,
                                color: Color(0xFFE53935), // rojoAlerta
                              ),
                              const SizedBox(width: 8),
                              const Text(
                                'Reintentar',
                                style: TextStyle(
                                  color: Color(0xE5E53935), // rojoAlerta con opacidad
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            }

            if (dashboardProvider.sessions.isEmpty) {
              return _buildEmptyState();
            }

            return _buildDashboardContent(dashboardProvider);
          },
        ),
      ),
      floatingActionButton: AnimationUtils.fadeSlideInAnimation(
        duration: const Duration(milliseconds: 500),
        curve: Curves.easeOutBack,
        offset: 30.0,
        child: AnimationUtils.scaleTapAnimation(
          onTap: () {
            Navigator.of(context).pushNamed(AppRoutes.practice);
          },
          child: FloatingActionButton.extended(
            onPressed: () {
              Navigator.of(context).pushNamed(AppRoutes.practice);
            },
            label: const Text('Nueva Práctica'),
            icon: const Icon(Icons.add),
            backgroundColor: AppColors.verdeCampo,
          ),
        ),
      ),
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: AnimationUtils.fadeInAnimation(
        duration: const Duration(milliseconds: 800),
        curve: Curves.easeOutQuart,
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            AnimationUtils.fadeSlideInAnimation(
              duration: const Duration(milliseconds: 800),
              offset: -30.0,
              child: const Icon(
                Icons.sports_golf,
                size: 72,
                color: AppColors.grisOscuro,
              ),
            ),
            const SizedBox(height: 16),
            AnimationUtils.fadeSlideInAnimation(
              duration: const Duration(milliseconds: 900),
              child: const Text(
                '¡Bienvenido a SGS Golf!',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
            ),
            const SizedBox(height: 8),
            AnimationUtils.fadeSlideInAnimation(
              duration: const Duration(milliseconds: 1000),
              child: const Padding(
                padding: EdgeInsets.symmetric(horizontal: 32),
                child: Text(
                  'Comienza registrando tu primera sesión de práctica',
                  textAlign: TextAlign.center,
                  style: TextStyle(fontSize: 16),
                ),
              ),
            ),
            const SizedBox(height: 24),
            AnimationUtils.fadeInAnimation(
              duration: const Duration(milliseconds: 1200),
              child: ElevatedButton.icon(
                icon: const Icon(Icons.add),
                label: const Text('Iniciar práctica'),
                onPressed: () {
                  Navigator.of(context).pushNamed(AppRoutes.practice);
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDashboardContent(DashboardProvider provider) {
    return ListView(
      padding: const EdgeInsets.all(16),
      children: [
        AnimationUtils.fadeSlideInAnimation(
          child: _buildStatsCards(provider),
        ),
        const SizedBox(height: 16),
        AnimationUtils.fadeSlideInAnimation(

          child: _buildQuickAccessButtons(),
        ),
        const SizedBox(height: 24),
        AnimationUtils.fadeSlideInAnimation(

          child: _buildRecentSessionsSection(provider),
        ),
      ],
    );
  }

  Widget _buildStatsCards(DashboardProvider provider) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: AnimatedContainer(
        duration: AnimationUtils.defaultDuration,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          boxShadow: const [
            BoxShadow(
              color: Color(0x0D000000),
              blurRadius: 10,
              offset: Offset(0, 3),
            ),
          ],
        ),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Estadísticas',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: AnimationUtils.fadeInAnimation(
                      duration: const Duration(milliseconds: 300),
                      child: _buildStatItem(
                        Icons.event,
                        provider.totalSessions.toString(),
                        'Sesiones',
                        AppColors.azulProfundo,
                      ),
                    ),
                  ),
                  Expanded(
                    child: AnimationUtils.fadeInAnimation(
                      duration: const Duration(milliseconds: 400),
                      child: _buildStatItem(
                        Icons.sports_golf,
                        provider.totalShots.toString(),
                        'Tiros',
                        AppColors.zanahoriaIntensa,
                      ),
                    ),
                  ),
                  Expanded(
                    child: AnimationUtils.fadeInAnimation(
                      duration: const Duration(milliseconds: 500),
                      child: _buildStatItem(
                        Icons.trending_up,
                        provider.averageShotsPerSession.toStringAsFixed(1),
                        'Promedio',
                        AppColors.verdeCampo,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatItem(
    IconData icon,
    String value,
    String label,
    Color color,
  ) {
    return AnimationUtils.fadeSlideInAnimation(
      duration: const Duration(milliseconds: 600),
      curve: Curves.easeOutBack,
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: color.withAlpha(25),
              shape: BoxShape.circle,
              boxShadow: [
                BoxShadow(
                  color: Color.fromARGB(
                    (255 * 0.1).round(),
                      (color.r * 255.0).round(),
                      (color.g * 255.0).round(),
                      (color.b * 255.0).round(),
                  ),
                  blurRadius: 8,
                  spreadRadius: 1,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Icon(icon, color: color, size: 28),
          ),
          const SizedBox(height: 8),
          AnimationUtils.fadeInAnimation(
            duration: const Duration(milliseconds: 800),
            child: Text(
              value,
              style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
          ),
          AnimationUtils.fadeInAnimation(
            duration: const Duration(milliseconds: 1000),
            child: Text(label, style: TextStyle(fontSize: 14, color: Colors.grey[600])),
          ),
        ],
      ),
    );
  }

  Widget _buildQuickAccessButtons() {
    return Column(
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
          children: [
            _buildQuickAccessButton(
              'Práctica',
              Icons.sports_golf,
              AppColors.verdeCampo,
              () => Navigator.of(context).pushNamed(AppRoutes.practice),
            ),
            _buildQuickAccessButton(
              'Análisis',
              Icons.bar_chart,
              AppColors.azulProfundo,
              () => Navigator.of(context).pushNamed(AppRoutes.analysis),
            ),
            _buildQuickAccessButton(
              'Exportar',
              Icons.file_download,
              AppColors.zanahoriaIntensa,
              () => Navigator.of(context).pushNamed(AppRoutes.export),
            ),
          ],
        ),
        const SizedBox(height: 12),
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            _buildQuickAccessButton(
              'Demo UI',
              Icons.palette,
              AppColors.grisOscuro,
              () => Navigator.of(context).pushNamed(DemoRoutes.componentsDemo),
            ),
            _buildQuickAccessButton(
              'Componentes',
              Icons.design_services,
              AppColors.azulProfundo,
              () =>
                  Navigator.of(context).pushNamed(DemoRoutes.uiComponentsDemo),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildQuickAccessButton(
    String label,
    IconData icon,
    Color color,
    VoidCallback onTap,
  ) {
    return AnimationUtils.scaleTapAnimation(
      onTap: onTap,
      child: Container(
        width: 100,
        padding: const EdgeInsets.symmetric(vertical: 12),
        child: Column(
          children: [
            AnimatedContainer(
              duration: AnimationUtils.defaultDuration,
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: color.withAlpha(25),
                shape: BoxShape.circle,
                boxShadow: [
                  BoxShadow(
                    color: color.withAlpha((255 * 0.2).round()),
                    blurRadius: 8,
                    spreadRadius: 1,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Icon(icon, color: color, size: 28),
            ),
            const SizedBox(height: 8),
            Text(label, style: const TextStyle(fontWeight: FontWeight.w500)),
          ],
        ),
      ),
    );
  }

  Widget _buildRecentSessionsSection(DashboardProvider provider) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const Text(
              'Sesiones recientes',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            TextButton(
              onPressed: () {
                // Ver todas las sesiones (para futuro desarrollo)
              },
              child: const Text('Ver todas'),
            ),
          ],
        ),
        const SizedBox(height: 8),
        SessionListWidget(
          sessions: provider.sessions,
          maxSessions: 5, // Mostrar solo las 5 más recientes
          showFilters: true, // Activar opciones de filtrado y ordenamiento
          onSessionTap: (session) {
            // En futuras implementaciones, navegar a detalle de sesión
          },
          onSessionDelete: (session) {
            // Confirmar antes de eliminar
            showDialog(
              context: context,
              builder: (context) => AlertDialog(
                title: const Text('¿Eliminar sesión?'),
                content: const Text('Esta acción no se puede deshacer'),
                actions: [
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: const Text('Cancelar'),
                  ),
                  TextButton(
                    onPressed: () {
                      Navigator.of(context).pop();
                      // Usar el key de Hive para eliminar
                      final key = provider.sessions.indexOf(session);
                      if (key >= 0) {
                        provider.deleteSession(key);
                      }
                    },
                    child: const Text('Eliminar'),
                  ),
                ],
              ),
            );
          },
        ),
      ],
    );
  }
}
